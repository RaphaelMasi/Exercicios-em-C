1. Crie uma função recursiva que receba um número inteiro positivo N e calcule o somatório dos números de 1 a N.
2. Faça uma função recursiva que calcule e retorne o fatorial de um número inteiro N.
3. Escreva uma função recursiva que calcule a soma dos primeiros n cubos: S(n) = 1³ + 2³ + ... + n³
4. Crie uma função recursiva que receba dois inteiros positivos k e n, e calcule kⁿ.
5. Faça uma função recursiva que calcule e retorne o N-ésimo termo da sequência de Fibonacci.
6. A multiplicação de dois números inteiros pode ser feita através de somas sucessivas. Proponha um algoritmo recursivo MultipRec(n1, n2) que calcule a multiplicação de dois inteiros.
7. Faça uma função recursiva que receba um número inteiro positivo N e imprima todos os números naturais de 0 até N, em ordem crescente.
8. Faça uma função recursiva que receba um número inteiro positivo N e imprima todos os números naturais de 0 até N, em ordem decrescente.
9. Faça uma função recursiva que receba um número inteiro positivo N (par) e imprima todos os números pares de 0 até N, em ordem crescente.
10. Faça uma função recursiva que receba um número inteiro positivo N (par) e imprima todos os números pares de 0 até N, em ordem decrescente.
11. Escreva uma função recursiva que exiba todos os elementos de um array de inteiros, separados por espaço.
12. Crie um programa que contenha uma função recursiva para encontrar o menor elemento de um vetor.
13. Escreva uma função recursiva SomaSerie(i, j, k) que devolva a soma da série de valores no intervalo [i, j] com incremento k.
14. Escreva uma função recursiva ImprimeSerie(i, j, k) que imprima na tela os valores da série no intervalo [i, j] com incremento k.
15. Faça uma função recursiva que calcule o valor da série S descrita a seguir, para um valor n > 0:
  S = 2 + 5/2 + 10/3 + ... + (1 + n²) / n
16. Faça uma função recursiva que receba um número inteiro positivo ímpar N e retorne o fatorial duplo desse número.
  O fatorial duplo é definido como o produto de todos os números naturais ímpares até N. Exemplo: 5!! = 1 × 3 × 5 = 15
17. Faça uma função recursiva que receba um número inteiro positivo N e retorne o fatorial quádruplo:
  (2n)! / n!
18. Faça uma função recursiva que receba um número inteiro positivo N e retorne o superfatorial desse número.
  Exemplo: sf(4) = 1! × 2! × 3! × 4! = 288
19. Faça uma função recursiva que receba um número inteiro positivo N e retorne o hiperfatorial:
  H(n) = 1¹ × 2² × 3³ × ... × nⁿ
20. Faça uma função recursiva que receba um número inteiro positivo N e retorne o fatorial exponencial:
  n^(n−1^(n−2^(...)))
21. Escreva uma função recursiva que calcule a sequência definida por:
  F(1) = 1
  F(2) = 2
  F(n) = 2 × F(n−1) + 3 × F(n−2)
22. Escreva uma função recursiva fibg(f0, f1, n) para a sequência de Fibonacci generalizada, onde:
  fibg(f0, f1, 0) = f0
  fibg(f0, f1, 1) = f1
  fibg(f0, f1, n) = fibg(f0, f1, n−1) + fibg(f0, f1, n−2), para n > 1
23. Faça uma função recursiva que permita somar os elementos de um vetor de inteiros.
24. Faça uma função recursiva que receba um número N e retorne o N-ésimo termo da sequência de Tribonacci:
  f(0) = 0
  f(1) = 0
  f(2) = 1
  f(n) = f(n−1) + f(n−2) + f(n−3), se n > 2
25. Faça uma função recursiva que receba um número N e retorne o N-ésimo termo da sequência de Tetranacci.
26. Faça uma função recursiva que receba um número N e retorne o N-ésimo termo da sequência de Padovan:
  P(0) = P(1) = P(2) = 1
  P(n) = P(n−2) + P(n−3), se n > 2
27. Implemente a função recursiva h(m, n) definida por:
  h(m, n) = m + 1, se n = 1
  h(m, n) = n + 1, se m = 1
  h(m, n) = h(m, n−1) + h(m−1, n), se m > 1 e n > 1
28. Faça uma função recursiva que implemente a função de Ackermann:
  A(m, n) = n + 1, se m = 0
  A(m, n) = A(m−1, 1), se m > 0 e n = 0
  A(m, n) = A(m−1, A(m, n−1)), se m > 0 e n > 0
29. Faça uma função recursiva para calcular os números de Pell:
  p(0) = 0
  p(1) = 1
  p(n) = 2 × p(n−1) + p(n−2), se n > 1
30. Faça uma função recursiva para calcular os números de Catalan:
  C(0) = 1
  C(n) = (2 × (2n−1) / (n+1)) × C(n−1), se n > 0
31. Faça uma função recursiva que receba um número N e retorne a N-ésima palavra de Fibonacci:
  f(0) = "b"
  f(1) = "a"
  f(n) = f(n−1) + f(n−2), se n > 1
  (Concatenação de strings)
32. Dado um número n na base decimal, escreva uma função recursiva que o converta para binário.
33. Crie um programa que receba um vetor de 100 números reais. Escreva uma função recursiva que inverta a ordem dos elementos.
34. Faça uma função recursiva que inverta um número inteiro N. Exemplo: 123 → 321
35. Escreva uma função recursiva que determine quantas vezes um dígito K ocorre num número natural N.
36. Escreva uma função recursiva mdc(x, y) que retorne o máximo divisor comum entre x e y.
  Se y = 0, então mdc(x, y) = x; caso contrário, mdc(x, y) = mdc(y, x % y)

//1
#include <stdio.h>

int somatorio(int n) {
    if (n == 1) return 1;
    return n + somatorio(n - 1);
}

int main() {
    int n = 5;
    printf("Somatório de 1 a %d: %d\n", n, somatorio(n));
    return 0;
}

//2

#include <stdio.h>

int fatorial(int n) {
    if (n <= 1) return 1;
    return n * fatorial(n - 1);
}

int main() {
    int n = 5;
    printf("Fatorial de %d: %d\n", n, fatorial(n));
    return 0;
}

//3

#include <stdio.h>

int somaCubos(int n) {
    if (n == 1) return 1;
    return n*n*n + somaCubos(n - 1);
}

int main() {
    int n = 3;
    printf("Soma dos primeiros %d cubos: %d\n", n, somaCubos(n));
    return 0;
}

//4

#include <stdio.h>

int potencia(int k, int n) {
    if (n == 0) return 1;
    return k * potencia(k, n - 1);
}

int main() {
    int k = 2, n = 3;
    printf("%d^%d = %d\n", k, n, potencia(k, n));
    return 0;
}

//5

#include <stdio.h>

int fibonacci(int n) {
    if (n == 0) return 0;
    if (n == 1) return 1;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

int main() {
    int n = 6;
    printf("Fibonacci(%d) = %d\n", n, fibonacci(n));
    return 0;
}

//6

#include <stdio.h>

int multiplica(int n1, int n2) {
    if (n2 == 0) return 0;
    return n1 + multiplica(n1, n2 - 1);
}

int main() {
    int a = 5, b = 4;
    printf("%d * %d = %d\n", a, b, multiplica(a, b));
    return 0;
}

//7

#include <stdio.h>

void imprimeCrescente(int n) {
    if (n > 0) imprimeCrescente(n - 1);
    printf("%d ", n);
}

int main() {
    int n = 5;
    imprimeCrescente(n);
    return 0;
}

//8

#include <stdio.h>

void imprimeDecrescente(int n) {
    printf("%d ", n);
    if (n > 0) imprimeDecrescente(n - 1);
}

int main() {
    int n = 5;
    imprimeDecrescente(n);
    return 0;
}

//9 

#include <stdio.h>

void imprimeParesCrescente(int n) {
    if (n > 0) imprimeParesCrescente(n - 2);
    printf("%d ", n);
}

int main() {
    int n = 8; // deve ser par
    imprimeParesCrescente(n);
    return 0;
}

//10

#include <stdio.h>

void imprimeParesDecrescente(int n) {
    printf("%d ", n);
    if (n > 0) imprimeParesDecrescente(n - 2);
}

int main() {
    int n = 8; // deve ser par
    imprimeParesDecrescente(n);
    return 0;
}

//11

#include <stdio.h>

void exibeArray(int arr[], int tamanho) {
    if (tamanho > 0) {
        exibeArray(arr, tamanho - 1);
        printf("%d ", arr[tamanho - 1]);
    }
}

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    exibeArray(arr, 5);
    return 0;
}

//12

#include <stdio.h>

int menorElemento(int vetor[], int tamanho) {
    if (tamanho == 1) return vetor[0];
    int menor = menorElemento(vetor, tamanho - 1);
    return vetor[tamanho - 1] < menor ? vetor[tamanho - 1] : menor;
}

int main() {
    int vetor[] = {5, 2, 8, 1, 4};
    printf("Menor elemento: %d\n", menorElemento(vetor, 5));
    return 0;
}

//13

#include <stdio.h>

int somaSerie(int i, int j, int k) {
    if (i > j) return 0;
    return i + somaSerie(i + k, j, k);
}

int main() {
    printf("Soma da série: %d\n", somaSerie(1, 10, 2));
    return 0;
}

//14

#include <stdio.h>

void imprimeSerie(int i, int j, int k) {
    printf("%d ", i);
    if (i + k <= j) imprimeSerie(i + k, j, k);
}

int main() {
    imprimeSerie(1, 10, 2);
    return 0;
}

//15

#include <stdio.h>

float calculaSerie(int n) {
    if (n == 1) return 2.0;
    return (1.0 + n*n)/n + calculaSerie(n - 1);
}

int main() {
    printf("Série(3) = %.2f\n", calculaSerie(3));
    return 0;
}

//16

#include <stdio.h>

int fatorialDuplo(int n) {
    if (n == 1) return 1;
    return n * fatorialDuplo(n - 2);
}

int main() {
    int n = 5;
    printf("%d!! = %d\n", n, fatorialDuplo(n));
    return 0;
}

//17

#include <stdio.h>

int fatorial(int n) {
    if (n <= 1) return 1;
    return n * fatorial(n - 1);
}

int fatorialQuadruplo(int n) {
    return fatorial(2 * n) / fatorial(n);
}

int main() {
    int n = 3;
    printf("Fatorial quádruplo de %d: %d\n", n, fatorialQuadruplo(n));
    return 0;
}

//18

#include <stdio.h>

int fatorial(int n) {
    if (n <= 1) return 1;
    return n * fatorial(n - 1);
}

int superFatorial(int n) {
    if (n == 1) return 1;
    return fatorial(n) * superFatorial(n - 1);
}

int main() {
    int n = 4;
    printf("Superfatorial(%d) = %d\n", n, superFatorial(n));
    return 0;
}

//19

#include <stdio.h>
#include <math.h>

int hiperFatorial(int n) {
    if (n == 1) return 1;
    return (int)pow(n, n) * hiperFatorial(n - 1);
}

int main() {
    int n = 3;
    printf("Hiperfatorial(%d) = %d\n", n, hiperFatorial(n));
    return 0;
}

//20

#include <stdio.h>
#include <math.h>

int fatorialExponencial(int n) {
    if (n == 1) return 1;
    return (int)pow(n, fatorialExponencial(n - 1));
}

int main() {
    int n = 3;
    printf("Fatorial exponencial(%d) = %d\n", n, fatorialExponencial(n));
    return 0;
}

//21

#include <stdio.h>

int sequencia(int n) {
    if (n == 1) return 1;
    if (n == 2) return 2;
    return 2 * sequencia(n - 1) + 3 * sequencia(n - 2);
}

int main() {
    int n = 4;
    printf("Sequencia(%d) = %d\n", n, sequencia(n));
    return 0;
}

//22

#include <stdio.h>

int fibg(int f0, int f1, int n) {
    if (n == 0) return f0;
    if (n == 1) return f1;
    return fibg(f0, f1, n - 1) + fibg(f0, f1, n - 2);
}

int main() {
    printf("FibG(0,1,5) = %d\n", fibg(0, 1, 5));
    return 0;
}

//23

#include <stdio.h>

int somaVetor(int vetor[], int tamanho) {
    if (tamanho == 0) return 0;
    return vetor[tamanho - 1] + somaVetor(vetor, tamanho - 1);
}

int main() {
    int vetor[] = {1, 2, 3, 4, 5};
    printf("Soma do vetor: %d\n", somaVetor(vetor, 5));
    return 0;
}

//24

#include <stdio.h>

int tribonacci(int n) {
    if (n == 0 || n == 1) return 0;
    if (n == 2) return 1;
    return tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n - 3);
}

int main() {
    int n = 5;
    printf("Tribonacci(%d) = %d\n", n, tribonacci(n));
    return 0;
}

//25

#include <stdio.h>

int tetranacci(int n) {
    if (n <= 2) return 0;
    if (n == 3) return 1;
    return tetranacci(n - 1) + tetranacci(n - 2) + tetranacci(n - 3) + tetranacci(n - 4);
}

int main() {
    int n = 6;
    printf("Tetranacci(%d) = %d\n", n, tetranacci(n));
    return 0;
}

//26

#include <stdio.h>

int padovan(int n) {
    if (n <= 2) return 1;
    return padovan(n - 2) + padovan(n - 3);
}

int main() {
    int n = 6;
    printf("Padovan(%d) = %d\n", n, padovan(n));
    return 0;
}


//27

#include <stdio.h>

int h(int m, int n) {
    if (n == 1) return m + 1;
    if (m == 1) return n + 1;
    return h(m, n - 1) + h(m - 1, n);
}

int main() {
    printf("h(2,2) = %d\n", h(2, 2));
    return 0;
}

//28

#include <stdio.h>

int ackerman(int m, int n) {
    if (m == 0) return n + 1;
    if (n == 0) return ackerman(m - 1, 1);
    return ackerman(m - 1, ackerman(m, n - 1));
}

int main() {
    printf("Ackerman(2,2) = %d\n", ackerman(2, 2));
    return 0;
}

//29

#include <stdio.h>

int pell(int n) {
    if (n == 0) return 0;
    if (n == 1) return 1;
    return 2 * pell(n - 1) + pell(n - 2);
}

int main() {
    int n = 4;
    printf("Pell(%d) = %d\n", n, pell(n));
    return 0;
}

//30

#include <stdio.h>

int catalan(int n) {
    if (n == 0) return 1;
    return (2 * (2 * n - 1) * catalan(n - 1)) / (n + 1);
}

int main() {
    int n = 4;
    printf("Catalan(%d) = %d\n", n, catalan(n));
    return 0;
}

//31

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

char* palavraFibonacci(int n) {
    if (n == 0) return strdup("b");
    if (n == 1) return strdup("a");
    
    char* fib1 = palavraFibonacci(n - 1);
    char* fib2 = palavraFibonacci(n - 2);
    
    char* resultado = malloc(strlen(fib1) + strlen(fib2) + 1);
    strcpy(resultado, fib1);
    strcat(resultado, fib2);
    
    free(fib1);
    free(fib2);
    
    return resultado;
}

int main() {
    int n = 3;
    char* palavra = palavraFibonacci(n);
    printf("Palavra Fibonacci(%d): %s\n", n, palavra);
    free(palavra);
    return 0;
}

//32

#include <stdio.h>

void decimalParaBinario(int n) {
    if (n / 2 != 0) decimalParaBinario(n / 2);
    printf("%d", n % 2);
}

int main() {
    int n = 10;
    printf("%d em binário: ", n);
    decimalParaBinario(n);
    return 0;
}

//33

#include <stdio.h>

void inverteVetor(float vetor[], int inicio, int fim) {
    if (inicio >= fim) return;
    float temp = vetor[inicio];
    vetor[inicio] = vetor[fim];
    vetor[fim] = temp;
    inverteVetor(vetor, inicio + 1, fim - 1);
}

int main() {
    float vetor[100];
    for (int i = 0; i < 100; i++) vetor[i] = i;
    
    inverteVetor(vetor, 0, 99);
    
    printf("Primeiros elementos do vetor invertido: %.1f %.1f %.1f\n", vetor[0], vetor[1], vetor[2]);
    return 0;
}

//34

#include <stdio.h>

int inverteNumero(int n, int invertido) {
    if (n == 0) return invertido;
    return inverteNumero(n / 10, invertido * 10 + n % 10);
}

int main() {
    int n = 12345;
    printf("Inverso de %d: %d\n", n, inverteNumero(n, 0));
    return 0;
}

//35

#include <stdio.h>

int contaDigitos(int n, int k) {
    if (n == 0) return 0;
    return ((n % 10) == k ? 1 : 0) + contaDigitos(n / 10, k);
}

int main() {
    int n = 122542, k = 2;
    printf("O dígito %d aparece %d vezes em %d\n", k, contaDigitos(n, k), n);
    return 0;
}

//36

#include <stdio.h>

int mdc(int x, int y) {
    if (y == 0) return x;
    return mdc(y, x % y);
}

int main() {
    int a = 36, b = 24;
    printf("MDC(%d,%d) = %d\n", a, b, mdc(a, b));
    return 0;
}

//37

#include <stdio.h>

int multiplicacaoRussa(int a, int b) {
    if (a == 1) return b;
    if (a % 2 != 0) return b + multiplicacaoRussa(a / 2, b * 2);
    return multiplicacaoRussa(a / 2, b * 2);
}

int main() {
    int a = 27, b = 82;
    printf("%d * %d = %d\n", a, b, multiplicacaoRussa(a, b));
    return 0;
}
