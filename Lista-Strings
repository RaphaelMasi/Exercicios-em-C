1. Escreva um programa que leia uma string e a imprima.
2. Crie um programa que calcule o comprimento de uma string (sem usar a função strlen).
3. Leia um nome e imprima-o apenas se a primeira letra for 'a' (maiúscula ou minúscula).
4. Escreva um programa que leia um nome e imprima as quatro primeiras letras.
5. Leia um nome, calcule e retorne quantas letras ele tem.
6. Leia o nome, sexo e idade de uma pessoa. Se o sexo for feminino e a idade inferior a 25 anos, imprima o nome seguido de "ACEITA"; caso contrário, imprima "NÃO ACEITA".
7. Crie um programa que compare duas strings (sem usar a função strcmp).
8. Escreva um programa que conte o número de vezes que o caractere '1' aparece numa string.
9. Escreva um programa que substitua todas as ocorrências do caractere '0' por '1' numa string.
10. Escreva um programa que receba uma palavra e a imprima de trás para a frente.
11. Escreva um programa que leia uma string do utilizador e a imprima sem as vogais.
12. Escreva um programa que leia uma palavra e calcule quantas vogais (a, e, i, o, u) ela contém. Em seguida, leia um caractere (vogal ou consoante) e substitua todas as vogais da palavra por esse caractere.
13. Leia uma frase e conte quantos espaços em branco ela possui. Lembra-te de que uma frase é um vetor de caracteres.
14. Escreva um programa que leia uma palavra (com no máximo 50 letras) e adicione 1 ao valor ASCII de cada caractere. Imprima a string resultante.
15. Escreva um programa que converta uma string de letras maiúsculas em letras minúsculas. Dica: some 32 aos caracteres cujo código ASCII esteja entre 65 e 90.
16. Escreva um programa que leia uma string e converta todos os caracteres para maiúsculas. Dica: subtraia 32 dos caracteres cujo código ASCII esteja entre 97 e 122.
17. Leia uma frase (incluindo espaços em branco) e remova todos os espaços. Em seguida, imprima o vetor resultante.
18. Escreva um programa que leia uma string e duas letras (L1 e L2). Substitua todas as ocorrências da letra L1 pela letra L2 na string.
19. Escreva um programa que leia a idade e o primeiro nome de até 10 pessoas. O programa deve parar se for digitada uma idade negativa. Ao final, imprima o nome e a idade da pessoa mais nova e da mais velha.
20. Escreva um programa que leia os modelos de cinco carros e os seus consumos (em km por litro). Em seguida, calcule e mostre: (a) o modelo mais económico; (b) quantos litros de combustível cada carro consome para percorrer 1000 km.
21. Escreva um programa que leia duas frases distintas e imprima cada uma invertida, substituindo todas as letras 'A' por '*'.
22. Escreva um programa que leia o nome e o valor de uma mercadoria. Calcule o valor com 10% de desconto para pagamento a pronto e imprima o nome, valor total, valor do desconto e valor a pagar.
23. Escreva um programa que leia uma string S e dois inteiros I e J, e imprima o segmento S[I..J].
24. Escreva um programa que leia uma string S, um caractere C e uma posição I, e retorne o índice da primeira ocorrência de C em S a partir da posição I.
25. Escreva um programa que leia duas palavras e indique qual delas vem primeiro em ordem alfabética.
26. Implemente a cifra de César com deslocamento de 3 posições. O programa deve ler uma string e imprimir a string criptografada.
27. Escreva um programa que determine se uma string é um palíndromo. Um palíndromo é uma palavra ou frase que se lê da mesma forma da esquerda para a direita e vice-versa.
28. Escreva um programa que leia duas strings e verifique se a segunda está contida no final da primeira.
29. Escreva um programa que leia duas strings, str1 e str2, e um inteiro N. Concatene até N caracteres de str2 no final de str1.
30. Escreva um programa que leia duas cadeias de caracteres A e B e determine quantas vezes A ocorre dentro de B.
31. Escreva um programa que contenha um menu com as seguintes opções:
(a) Ler uma string S1 (máximo de 20 caracteres);
(b) Imprimir o tamanho da string S1;
(c) Comparar a string S1 com uma nova string S2 fornecida pelo utilizador e imprimir o resultado da comparação;
(d) Concatenar a string S1 com uma nova string S2 e imprimir o resultado;
(e) Imprimir a string S1 de forma reversa;
(f) Contar quantas vezes um caractere fornecido pelo utilizador aparece na string S1;
(g) Substituir a primeira ocorrência do caractere C1 em S1 pelo caractere C2 (ambos informados pelo utilizador);
(h) Verificar se uma string S2 é substring de S1 (S2 fornecida pelo utilizador);
(i) Retornar uma substring de S1 a partir de uma posição e com determinado comprimento, informados pelo utilizador.

32. Escreva um programa que leia uma cadeia de caracteres no formato “DD/MM/AAAA” e copie o dia, mês e ano para três variáveis inteiras. Verifique se as barras estão nas posições corretas e se DD, MM e AAAA são numéricos.

33. Escreva um programa que leia nomes de até 5 alunos. O utilizador poderá indicar se deseja inserir mais nomes. Ao final, deverá informar um nome (ou parte dele) para verificar se consta na lista. Se encontrado, o programa deverá exibir o nome completo e o índice correspondente no vetor.

34. Escreva um programa que encontre o conjunto de 5 dígitos consecutivos na sequência numérica abaixo que gere o maior produto:
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042

// 1. Ler e imprimir string
#include <stdio.h>

int main() {
    char str[100];
    printf("Digite uma string: ");
    fgets(str, sizeof(str), stdin);
    printf("String lida: %s", str);
    return 0;
}



// 2. Comprimento de uma string (sem strlen)
#include <stdio.h>

int main() {
    char str[100];
    int i = 0;
    printf("Digite uma string: ");
    fgets(str, sizeof(str), stdin);
    while (str[i] != '\0' && str[i] != '\n') i++;
    printf("Comprimento: %d\n", i);
    return 0;
}



// 3. Imprimir nome se começar com 'a' ou 'A'
#include <stdio.h>

int main() {
    char nome[100];
    printf("Digite um nome: ");
    fgets(nome, sizeof(nome), stdin);
    if (nome[0] == 'a' || nome[0] == 'A') {
        printf("Nome: %s", nome);
    }
    return 0;
}



// 4. Imprimir as 4 primeiras letras
#include <stdio.h>

int main() {
    char nome[100];
    printf("Digite um nome: ");
    fgets(nome, sizeof(nome), stdin);
    printf("Primeiras 4 letras: ");
    for (int i = 0; i < 4 && nome[i] != '\0'; i++) {
        putchar(nome[i]);
    }
    printf("\n");
    return 0;
}



// 5. Contar letras no nome
#include <stdio.h>

int main() {
    char nome[100];
    int i = 0;
    printf("Digite um nome: ");
    fgets(nome, sizeof(nome), stdin);
    while (nome[i] != '\0' && nome[i] != '\n') i++;
    printf("Número de letras: %d\n", i);
    return 0;
}



// 6. Verificar aceitação
#include <stdio.h>
#include <string.h>

int main() {
    char nome[100], sexo;
    int idade;
    printf("Digite o nome: ");
    fgets(nome, sizeof(nome), stdin);
    printf("Sexo (M/F): ");
    scanf(" %c", &sexo);
    printf("Idade: ");
    scanf("%d", &idade);

    if ((sexo == 'F' || sexo == 'f') && idade < 25) {
        printf("%sACEITA\n", nome);
    } else {
        printf("NÃO ACEITA\n");
    }
    return 0;
}



// 7. Comparar duas strings (sem strcmp)
#include <stdio.h>

int main() {
    char str1[100], str2[100];
    int iguais = 1, i = 0;
    printf("Digite a primeira string: ");
    fgets(str1, sizeof(str1), stdin);
    printf("Digite a segunda string: ");
    fgets(str2, sizeof(str2), stdin);

    while (str1[i] != '\0' && str2[i] != '\0') {
        if (str1[i] != str2[i]) {
            iguais = 0;
            break;
        }
        i++;
    }

    if (iguais && str1[i] == str2[i]) {
        printf("Strings iguais\n");
    } else {
        printf("Strings diferentes\n");
    }
    return 0;
}


// 8. Contar número de '1's
#include <stdio.h>

int main() {
    char str[100];
    int count = 0;
    printf("Digite uma string: ");
    fgets(str, sizeof(str), stdin);
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] == '1') count++;
    }
    printf("Número de '1's: %d\n", count);
    return 0;
}



// 9. Substituir '0' por '1'
#include <stdio.h>

int main() {
    char str[100];
    printf("Digite uma string: ");
    fgets(str, sizeof(str), stdin);
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] == '0') str[i] = '1';
    }
    printf("String modificada: %s", str);
    return 0;
}



// 10. Palavra de trás para a frente
#include <stdio.h>
#include <string.h>

int main() {
    char palavra[100];
    int len;
    printf("Digite uma palavra: ");
    fgets(palavra, sizeof(palavra), stdin);
    len = strlen(palavra);
    if (palavra[len - 1] == '\n') len--; // remover newline
    printf("Invertida: ");
    for (int i = len - 1; i >= 0; i--) {
        putchar(palavra[i]);
    }
    printf("\n");
    return 0;

// 11. String sem vogais
#include <stdio.h>
#include <string.h>

int main() {
    char str[100];
    printf("Digite uma string: ");
    fgets(str, sizeof(str), stdin);
    printf("Sem vogais: ");
    for (int i = 0; str[i] != '\0'; i++) {
        if (strchr("aeiouAEIOU", str[i]) == NULL)
            putchar(str[i]);
    }
    return 0;
}

// 12. Contar e substituir vogais
#include <stdio.h>
#include <string.h>

int main() {
    char palavra[100], letra;
    int count = 0;
    printf("Digite uma palavra: ");
    fgets(palavra, sizeof(palavra), stdin);
    printf("Digite um caractere para substituir as vogais: ");
    scanf(" %c", &letra);
    for (int i = 0; palavra[i] != '\0'; i++) {
        if (strchr("aeiouAEIOU", palavra[i])) {
            count++;
            palavra[i] = letra;
        }
    }
    printf("Quantidade de vogais: %d\n", count);
    printf("Palavra modificada: %s", palavra);
    return 0;
}

// 13. Contar espaços em branco
#include <stdio.h>

int main() {
    char frase[200];
    int count = 0;
    printf("Digite uma frase: ");
    fgets(frase, sizeof(frase), stdin);
    for (int i = 0; frase[i] != '\0'; i++) {
        if (frase[i] == ' ') count++;
    }
    printf("Número de espaços: %d\n", count);
    return 0;
}

// 14. Somar 1 ao ASCII de cada letra
#include <stdio.h>

int main() {
    char palavra[51];
    printf("Digite uma palavra (até 50 letras): ");
    fgets(palavra, sizeof(palavra), stdin);
    for (int i = 0; palavra[i] != '\0'; i++) {
        if (palavra[i] != '\n') palavra[i] += 1;
    }
    printf("Resultado: %s", palavra);
    return 0;
}

// 15. Maiúsculas para minúsculas
#include <stdio.h>

int main() {
    char str[100];
    printf("Digite uma string: ");
    fgets(str, sizeof(str), stdin);
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] >= 'A' && str[i] <= 'Z') str[i] += 32;
    }
    printf("Resultado: %s", str);
    return 0;
}

// 16. Minúsculas para maiúsculas
#include <stdio.h>

int main() {
    char str[100];
    printf("Digite uma string: ");
    fgets(str, sizeof(str), stdin);
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] >= 'a' && str[i] <= 'z') str[i] -= 32;
    }
    printf("Resultado: %s", str);
    return 0;
}

// 17. Remover espaços
#include <stdio.h>

int main() {
    char frase[200], resultado[200];
    int j = 0;
    printf("Digite uma frase: ");
    fgets(frase, sizeof(frase), stdin);
    for (int i = 0; frase[i] != '\0'; i++) {
        if (frase[i] != ' ') resultado[j++] = frase[i];
    }
    resultado[j] = '\0';
    printf("Resultado: %s", resultado);
    return 0;
}

// 18. Substituir letra L1 por L2
#include <stdio.h>
#include <string.h>

int main() {
    char str[100], l1, l2;
    printf("Digite a string: ");
    fgets(str, sizeof(str), stdin);
    printf("Digite a letra a ser substituída (L1): ");
    scanf(" %c", &l1);
    printf("Digite a letra substituta (L2): ");
    scanf(" %c", &l2);
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] == l1) str[i] = l2;
    }
    printf("Resultado: %s", str);
    return 0;
}

// 19. Nome e idade - mais novo e mais velho
#include <stdio.h>
#include <string.h>

int main() {
    char nomes[10][50];
    int idades[10], count = 0;
    int mais_novo = 999, mais_velho = -1;
    char nome_novo[50], nome_velho[50];
    for (int i = 0; i < 10; i++) {
        printf("Digite a idade: ");
        scanf("%d", &idades[i]);
        if (idades[i] < 0) break;
        printf("Digite o nome: ");
        scanf("%s", nomes[i]);
        if (idades[i] < mais_novo) {
            mais_novo = idades[i];
            strcpy(nome_novo, nomes[i]);
        }
        if (idades[i] > mais_velho) {
            mais_velho = idades[i];
            strcpy(nome_velho, nomes[i]);
        }
        count++;
    }
    if (count > 0) {
        printf("Mais novo: %s (%d anos)\n", nome_novo, mais_novo);
        printf("Mais velho: %s (%d anos)\n", nome_velho, mais_velho);
    }
    return 0;
}

// 20. Carros e consumo
#include <stdio.h>
#include <string.h>

int main() {
    char modelos[5][50];
    float consumo[5], menor;
    int indice_menor = 0;
    for (int i = 0; i < 5; i++) {
        printf("Digite o modelo do carro %d: ", i + 1);
        scanf("%s", modelos[i]);
        printf("Digite o consumo (km/l): ");
        scanf("%f", &consumo[i]);
    }
    menor = consumo[0];
    for (int i = 1; i < 5; i++) {
        if (consumo[i] > menor) {
            menor = consumo[i];
            indice_menor = i;
        }
    }
    printf("\nCarro mais económico: %s\n", modelos[indice_menor]);
    for (int i = 0; i < 5; i++) {
        float litros = 1000 / consumo[i];
        printf("%s consome %.2f litros para 1000 km\n", modelos[i], litros);
    }
    return 0;
}

// 21. Inverter frases e trocar A por *
#include <stdio.h>
#include <string.h>

void inverter(char *str) {
    int len = strlen(str);
    for (int i = len - 1; i >= 0; i--) {
        if (str[i] == 'A' || str[i] == 'a') putchar('*');
        else putchar(str[i]);
    }
}

int main() {
    char frase1[100], frase2[100];
    printf("Digite a primeira frase: ");
    fgets(frase1, sizeof(frase1), stdin);
    printf("Digite a segunda frase: ");
    fgets(frase2, sizeof(frase2), stdin);
    printf("Frase 1 invertida: "); inverter(frase1);
    printf("\nFrase 2 invertida: "); inverter(frase2);
    return 0;
}

// 22. Calcular desconto à vista
#include <stdio.h>

int main() {
    char nome[100];
    float valor, desconto, total;
    printf("Nome da mercadoria: ");
    fgets(nome, sizeof(nome), stdin);
    printf("Valor: R$ ");
    scanf("%f", &valor);
    desconto = valor * 0.10;
    total = valor - desconto;
    printf("Mercadoria: %s", nome);
    printf("Valor total: R$ %.2f\nDesconto: R$ %.2f\nValor à vista: R$ %.2f\n", valor, desconto, total);
    return 0;
}

// 23. Imprimir segmento S[I..J]
#include <stdio.h>
#include <string.h>

int main() {
    char s[100];
    int i, j;
    printf("Digite uma string: ");
    fgets(s, sizeof(s), stdin);
    printf("Digite I e J: ");
    scanf("%d %d", &i, &j);
    for (int k = i; k <= j && s[k] != '\0'; k++) {
        putchar(s[k]);
    }
    printf("\n");
    return 0;
}

// 24. Procurar caractere a partir de I
#include <stdio.h>
#include <string.h>

int main() {
    char s[100], c;
    int i;
    printf("Digite a string: ");
    fgets(s, sizeof(s), stdin);
    printf("Digite o caractere a procurar: ");
    scanf(" %c", &c);
    printf("Digite a posição inicial: ");
    scanf("%d", &i);
    for (int j = i; s[j] != '\0'; j++) {
        if (s[j] == c) {
            printf("Índice encontrado: %d\n", j);
            return 0;
        }
    }
    printf("Caractere não encontrado.\n");
    return 0;
}

// 25. Verificar ordem alfabética
#include <stdio.h>
#include <string.h>

int main() {
    char p1[100], p2[100];
    printf("Digite a primeira palavra: ");
    scanf("%s", p1);
    printf("Digite a segunda palavra: ");
    scanf("%s", p2);
    if (strcmp(p1, p2) < 0)
        printf("%s vem antes de %s\n", p1, p2);
    else
        printf("%s vem antes de %s\n", p2, p1);
    return 0;
}

// 26. Código de César (3 posições)
#include <stdio.h>
#include <string.h>

int main() {
    char texto[200];
    printf("Digite o texto: ");
    fgets(texto, sizeof(texto), stdin);
    for (int i = 0; texto[i] != '\0'; i++) {
        char c = texto[i];
        if (c >= 'a' && c <= 'z') c = ((c - 'a' + 3) % 26) + 'A';
        else if (c >= 'A' && c <= 'Z') c = ((c - 'A' + 3) % 26) + 'A';
        putchar(c);
    }
    printf("\n");
    return 0;
}

// 27. Verificar palíndromo
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int is_palindromo(char *str) {
    char clean[200];
    int len = 0;
    for (int i = 0; str[i] != '\0'; i++) {
        if (isalpha(str[i])) clean[len++] = tolower(str[i]);
    }
    clean[len] = '\0';
    for (int i = 0; i < len / 2; i++) {
        if (clean[i] != clean[len - i - 1]) return 0;
    }
    return 1;
}

int main() {
    char frase[200];
    printf("Digite a frase: ");
    fgets(frase, sizeof(frase), stdin);
    if (is_palindromo(frase))
        printf("É um palíndromo.\n");
    else
        printf("Não é um palíndromo.\n");
    return 0;
}

// 28. Verificar se segunda string está no final da primeira
#include <stdio.h>
#include <string.h>

int main() {
    char str1[100], str2[100];
    printf("Digite a primeira string: ");
    scanf("%s", str1);
    printf("Digite a segunda string: ");
    scanf("%s", str2);
    int l1 = strlen(str1), l2 = strlen(str2);
    if (l2 <= l1 && strcmp(&str1[l1 - l2], str2) == 0)
        printf("A segunda string está no final da primeira.\n");
    else
        printf("Não está no final.\n");
    return 0;
}

// 29. Concatenar no máximo N caracteres
#include <stdio.h>
#include <string.h>

int main() {
    char str1[200] = "", str2[100];
    int n;
    printf("Digite str1: ");
    fgets(str1, sizeof(str1), stdin);
    printf("Digite str2: ");
    fgets(str2, sizeof(str2), stdin);
    printf("Digite N: ");
    scanf("%d", &n);
    strncat(str1, str2, n);
    printf("Resultado: %s", str1);
    return 0;
}

// 30. Contar quantas vezes A aparece em B
#include <stdio.h>
#include <string.h>

int main() {
    char a[100], b[200];
    int count = 0;
    printf("Digite a cadeia A: ");
    scanf("%s", a);
    printf("Digite a cadeia B: ");
    scanf("%s", b);
    int la = strlen(a), lb = strlen(b);
    for (int i = 0; i <= lb - la; i++) {
        if (strncmp(&b[i], a, la) == 0) count++;
    }
    printf("A cadeia A ocorre %d vezes em B.\n", count);
    return 0;
}

// 31. Menu de operações com string S1
#include <stdio.h>
#include <string.h>

int main() {
    char S1[21] = "", S2[21], C1, C2;
    int opcao, pos, tamanho, count;
    char ch;
    do {
        printf("\nMenu:\n");
        printf("1. Ler string S1\n2. Imprimir tamanho\n3. Comparar com nova string S2\n");
        printf("4. Concatenar com S2\n5. Imprimir reversa\n6. Contar caractere\n");
        printf("7. Substituir primeira ocorrência de caractere\n8. Verificar substring\n");
        printf("9. Retornar substring\n0. Sair\nEscolha: ");
        scanf("%d", &opcao); getchar();

        switch(opcao) {
            case 1:
                printf("Digite S1: ");
                fgets(S1, sizeof(S1), stdin);
                S1[strcspn(S1, "\n")] = 0;
                break;
            case 2:
                printf("Tamanho: %lu\n", strlen(S1));
                break;
            case 3:
                printf("Digite S2: ");
                fgets(S2, sizeof(S2), stdin);
                S2[strcspn(S2, "\n")] = 0;
                printf("Comparação: %d\n", strcmp(S1, S2));
                break;
            case 4:
                printf("Digite S2: ");
                fgets(S2, sizeof(S2), stdin);
                S2[strcspn(S2, "\n")] = 0;
                strncat(S1, S2, 20 - strlen(S1));
                printf("Concatenado: %s\n", S1);
                break;
            case 5:
                printf("Reversa: ");
                for (int i = strlen(S1) - 1; i >= 0; i--) putchar(S1[i]);
                printf("\n");
                break;
            case 6:
                printf("Digite o caractere: ");
                scanf(" %c", &ch);
                count = 0;
                for (int i = 0; S1[i]; i++) if (S1[i] == ch) count++;
                printf("Ocorrências: %d\n", count);
                break;
            case 7:
                printf("Digite C1 e C2: ");
                scanf(" %c %c", &C1, &C2);
                for (int i = 0; S1[i]; i++) {
                    if (S1[i] == C1) { S1[i] = C2; break; }
                }
                printf("Resultado: %s\n", S1);
                break;
            case 8:
                printf("Digite S2: ");
                fgets(S2, sizeof(S2), stdin);
                S2[strcspn(S2, "\n")] = 0;
                if (strstr(S1, S2)) printf("S2 é substring de S1.\n");
                else printf("S2 não encontrada.\n");
                break;
            case 9:
                printf("Posição inicial e tamanho: ");
                scanf("%d %d", &pos, &tamanho);
                for (int i = 0; i < tamanho && S1[pos + i]; i++) putchar(S1[pos + i]);
                printf("\n");
                break;
        }
    } while (opcao != 0);
    return 0;
}

// 32. Validar data "DD/MM/AAAA"
#include <stdio.h>
#include <stdlib.h>

int main() {
    char data[11];
    int dia, mes, ano;
    printf("Digite a data (DD/MM/AAAA): ");
    fgets(data, sizeof(data), stdin);
    if (data[2] != '/' || data[5] != '/') {
        printf("Formato inválido.\n");
        return 1;
    }
    data[2] = data[5] = '\0';
    if (!isdigit(data[0]) || !isdigit(data[1]) || !isdigit(data[3]) || !isdigit(data[4]) ||
        !isdigit(data[6])) {
        printf("Data inválida.\n");
        return 1;
    }
    dia = atoi(data);
    mes = atoi(&data[3]);
    ano = atoi(&data[6]);
    printf("Dia: %d, Mês: %d, Ano: %d\n", dia, mes, ano);
    return 0;
}

// 33. Lista de alunos e busca
#include <stdio.h>
#include <string.h>

int main() {
    char alunos[5][100];
    char busca[100];
    int i, total = 0;
    char resp;
    for (i = 0; i < 5; i++) {
        printf("Deseja inserir um nome? (s/n): ");
        scanf(" %c", &resp);
        if (resp != 's') break;
        printf("Digite o nome do aluno: ");
        scanf(" %[^"]", alunos[i]);
        total++;
    }
    printf("Digite o nome (ou parte) a procurar: ");
    scanf(" %[^"]", busca);
    for (i = 0; i < total; i++) {
        if (strstr(alunos[i], busca)) {
            printf("Encontrado: %s no índice %d\n", alunos[i], i);
        }
    }
    return 0;
}

// 34. Maior produto de 5 dígitos consecutivos
#include <stdio.h>
#include <string.h>

int main() {
    char seq[] =
        "73167176531330624919225119674426574742355349194934"
        "96983520312774506326239578318016984801869478851843"
        "85861560789112949495459501737958331952853208805511"
        "12540698747158523863050715693290963295227443043557"
        "66896648950445244523161731856403098711121722383113"
        "62229893423380308135336276614282806444486645238749"
        "30358907296290491560440772390713810515859307960866"
        "70172427121883998797908792274921901699720888093776"
        "65727333001053367881220235421809751254540594752243"
        "52584907711670556013604839586446706324415722155397"
        "53697817977846174064955149290862569321978468622482"
        "83972241375657056057490261407972968652414535100474"
        "82166370484403199890008895243450658541227588666881"
        "16427171479924442928230863465674813919123162824586"
        "17866458359124566529476545682848912883142607690042";

    int max_prod = 0, prod, i;
    char melhor[6];
    for (i = 0; i < strlen(seq) - 4; i++) {
        prod = (seq[i]-'0')*(seq[i+1]-'0')*(seq[i+2]-'0')*(seq[i+3]-'0')*(seq[i+4]-'0');
        if (prod > max_prod) {
            max_prod = prod;
            strncpy(melhor, &seq[i], 5);
            melhor[5] = '\0';
        }
    }
    printf("Maior produto: %d (com dígitos %s)\n", max_prod, melhor);
    return 0;
}




